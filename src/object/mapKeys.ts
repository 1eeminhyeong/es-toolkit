/**
 * Creates a new object with the same values as the given object, but with keys generated
 * by running each own enumerable property of the object through the iteratee function.
 *
 * @template T - The type of the object.
 * @template K - The type of the keys in the object.
 * @template N - The type of the new keys generated by the iteratee function.
 *
 * @param {T} object - The object to iterate over.
 * @param {(value: T[K], key: K, object: T) => N} iteratee - The function invoked per own enumerable property.
 * @returns {Record<N, T[K]>} - Returns the new mapped object.
 *
 * @example
 * // Example usage:
 * const obj = { a: 1, b: 2 };
 * const result = mapKeys(obj, (value, key) => key + value);
 * console.log(result); // { a1: 1, b2: 2 }
 */
export function mapKeys<
  T extends Record<PropertyKey, unknown>,
  K extends keyof T,
  N extends PropertyKey,
>(object: T, iteratee: (value: T[K], key: K, object: T) => N) {
  const result = {} as Record<N, T[K]>;
  const keys = Object.keys(object);

  for (let i = 0; i < keys.length; i++) {
    const key = keys[i] as K;
    const value = object[key];

    result[iteratee(value, key, object)] = value as any;
  }

  return result;
}
